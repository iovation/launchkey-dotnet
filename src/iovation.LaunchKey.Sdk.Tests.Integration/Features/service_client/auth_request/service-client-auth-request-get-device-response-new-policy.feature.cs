// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace iovation.LaunchKey.Sdk.Tests.Integration.Features.Service_Client.Auth_Request
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ServiceClientAuthorizationRequestGetDeviceResponsePolicy_NewFormatFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "service-client-auth-request-get-device-response-new-policy.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Service Client Authorization Request: Get Device Response Policy - New Format", "  In order to understand an auth response\n  As a Directory Service\n  I can retrie" +
                    "ve an Authorization Requests that been responded to and determine the policy tha" +
                    "t was last processed by the device in the new policy format", ProgrammingLanguage.CSharp, new string[] {
                        "device_testing"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Service Client Authorization Request: Get Device Response Policy - New Format")))
            {
                global::iovation.LaunchKey.Sdk.Tests.Integration.Features.Service_Client.Auth_Request.ServiceClientAuthorizationRequestGetDeviceResponsePolicy_NewFormatFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
  #line 8
    testRunner.Given("I created a Directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
    testRunner.And("I have added an SDK Key to the Directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
    testRunner.And("I created a Directory Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
    testRunner.And("I have a linked Device", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify that a Factors Policy can be parsed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Service Client Authorization Request: Get Device Response Policy - New Format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("device_testing")]
        public virtual void VerifyThatAFactorsPolicyCanBeParsed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a Factors Policy can be parsed", null, ((string[])(null)));
#line 13
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line 14
    testRunner.When("I create a new Factors Policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
    testRunner.And("I set the factors to \"INHERENCE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
    testRunner.And("I set the Advanced Policy for the Current Directory Service to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
    testRunner.And("I make an Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
    testRunner.And("I deny the auth request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
    testRunner.And("I get the response for the Advanced Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
    testRunner.Then("the Advanced Authorization response should require Inherence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
    testRunner.And("the Advanced Authorization response should have the requirement \"TYPES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify that a Method Amount Policy can be parsed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Service Client Authorization Request: Get Device Response Policy - New Format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("device_testing")]
        public virtual void VerifyThatAMethodAmountPolicyCanBeParsed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a Method Amount Policy can be parsed", null, ((string[])(null)));
#line 23
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line 24
    testRunner.When("I create a new MethodAmountPolicy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
    testRunner.And("I set the amount to \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
    testRunner.And("I set the Advanced Policy for the Current Directory Service to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
    testRunner.And("I make an Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
    testRunner.And("I deny the auth request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
    testRunner.And("I get the response for the Advanced Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
    testRunner.Then("the Advanced Authorization response should have amount set to 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
    testRunner.And("the Advanced Authorization response should have the requirement \"AMOUNT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify that a Conditional Geofence Policy can be parsed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Service Client Authorization Request: Get Device Response Policy - New Format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("device_testing")]
        public virtual void VerifyThatAConditionalGeofencePolicyCanBeParsed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a Conditional Geofence Policy can be parsed", null, ((string[])(null)));
#line 34
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line 35
    testRunner.Given("the Directory Service is set to any Conditional Geofence Policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "latitude",
                        "longitude",
                        "radius",
                        "name"});
            table65.AddRow(new string[] {
                        "41",
                        "-141",
                        "234400",
                        "Large Fence"});
#line 36
    testRunner.When("I add the following GeoCircleFence items", ((string)(null)), table65, "When ");
#line 39
    testRunner.And("I set the Advanced Policy for the Current Directory Service to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
    testRunner.And("I make an Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
    testRunner.And("I deny the auth request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
    testRunner.And("I get the response for the Advanced Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
    testRunner.Then("the Advanced Authorization response should contain a GeoCircleFence with a radius" +
                    " of 234400, a latitude of 41, a longitude of -141, and a name of \"Large Fence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
    testRunner.And("the Advanced Authorization response should have the requirement \"COND_GEO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify that GeoCircleFence fences can be parsed from Fences on a Factors Policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Service Client Authorization Request: Get Device Response Policy - New Format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("device_testing")]
        public virtual void VerifyThatGeoCircleFenceFencesCanBeParsedFromFencesOnAFactorsPolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that GeoCircleFence fences can be parsed from Fences on a Factors Policy", null, ((string[])(null)));
#line 46
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line 47
    testRunner.When("I create a new Factors Policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
    testRunner.And("I set the factors to \"KNOWLEDGE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "latitude",
                        "longitude",
                        "radius",
                        "name"});
            table66.AddRow(new string[] {
                        "45.1250",
                        "150.51",
                        "15200",
                        "Large Fence"});
            table66.AddRow(new string[] {
                        "-50.01",
                        "-140",
                        "100",
                        "Small Fence"});
#line 49
    testRunner.And("I add the following GeoCircleFence items", ((string)(null)), table66, "And ");
#line 53
    testRunner.And("I set the Advanced Policy for the Current Directory Service to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
    testRunner.And("I make an Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
    testRunner.And("I deny the auth request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
    testRunner.And("I get the response for the Advanced Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
    testRunner.Then("the Advanced Authorization response should contain a GeoCircleFence with a radius" +
                    " of 15200, a latitude of 45.1250, a longitude of 150.51, and a name of \"Large Fe" +
                    "nce\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
    testRunner.And("the Advanced Authorization response should contain a GeoCircleFence with a radius" +
                    " of 100, a latitude of -50.01, a longitude of -140, and a name of \"Small Fence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
    testRunner.And("the Advanced Authorization response should have the requirement \"TYPES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify that GeoCircleFence fences can be parsed from Fences on a Methods Amount P" +
            "olicy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Service Client Authorization Request: Get Device Response Policy - New Format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("device_testing")]
        public virtual void VerifyThatGeoCircleFenceFencesCanBeParsedFromFencesOnAMethodsAmountPolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that GeoCircleFence fences can be parsed from Fences on a Methods Amount P" +
                    "olicy", null, ((string[])(null)));
#line 61
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line 62
    testRunner.When("I create a new MethodAmountPolicy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "latitude",
                        "longitude",
                        "radius",
                        "name"});
            table67.AddRow(new string[] {
                        "45.1250",
                        "150.51",
                        "15200",
                        "Large Fence"});
            table67.AddRow(new string[] {
                        "-50.01",
                        "-140",
                        "100",
                        "Small Fence"});
#line 63
    testRunner.And("I add the following GeoCircleFence items", ((string)(null)), table67, "And ");
#line 67
    testRunner.And("I set the Advanced Policy for the Current Directory Service to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
    testRunner.And("I make an Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
    testRunner.And("I deny the auth request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
    testRunner.And("I get the response for the Advanced Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
    testRunner.Then("the Advanced Authorization response should contain a GeoCircleFence with a radius" +
                    " of 15200, a latitude of 45.1250, a longitude of 150.51, and a name of \"Large Fe" +
                    "nce\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 72
    testRunner.And("the Advanced Authorization response should contain a GeoCircleFence with a radius" +
                    " of 100, a latitude of -50.01, a longitude of -140, and a name of \"Small Fence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
    testRunner.And("the Advanced Authorization response should have the requirement \"AMOUNT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify that TerritoryFence fences can be parsed from Fences on a Factors Policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Service Client Authorization Request: Get Device Response Policy - New Format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("device_testing")]
        public virtual void VerifyThatTerritoryFenceFencesCanBeParsedFromFencesOnAFactorsPolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that TerritoryFence fences can be parsed from Fences on a Factors Policy", null, ((string[])(null)));
#line 75
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line 76
    testRunner.When("I create a new Factors Policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
    testRunner.And("I set the factors to \"KNOWLEDGE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "country",
                        "admin_area",
                        "postal_code",
                        "name"});
            table68.AddRow(new string[] {
                        "US",
                        "US-NV",
                        "89120",
                        "US-NV"});
#line 78
    testRunner.And("I add the following TerritoryFence items", ((string)(null)), table68, "And ");
#line 81
    testRunner.And("I set the Advanced Policy for the Current Directory Service to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
    testRunner.And("I make an Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
    testRunner.And("I deny the auth request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
    testRunner.And("I get the response for the Advanced Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
    testRunner.Then("the Advanced Authorization response should contain a TerritoryFence with a countr" +
                    "y of \"US\", a administrative area of \"US-NV\", a postal code of \"89120\", and a nam" +
                    "e of \"US-NV\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
    testRunner.And("the Advanced Authorization response should have the requirement \"TYPES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify that TerritoryFence fences can be parsed from Fences on a Methods Amount P" +
            "olicy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Service Client Authorization Request: Get Device Response Policy - New Format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("device_testing")]
        public virtual void VerifyThatTerritoryFenceFencesCanBeParsedFromFencesOnAMethodsAmountPolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that TerritoryFence fences can be parsed from Fences on a Methods Amount P" +
                    "olicy", null, ((string[])(null)));
#line 88
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line 89
    testRunner.When("I create a new MethodAmountPolicy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "country",
                        "admin_area",
                        "postal_code",
                        "name"});
            table69.AddRow(new string[] {
                        "US",
                        "US-NV",
                        "89120",
                        "US-NV"});
#line 90
    testRunner.And("I add the following TerritoryFence items", ((string)(null)), table69, "And ");
#line 93
    testRunner.And("I set the Advanced Policy for the Current Directory Service to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
    testRunner.And("I make an Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
    testRunner.And("I deny the auth request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
    testRunner.And("I get the response for the Advanced Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
    testRunner.Then("the Advanced Authorization response should contain a TerritoryFence with a countr" +
                    "y of \"US\", a administrative area of \"US-NV\", a postal code of \"89120\", and a nam" +
                    "e of \"US-NV\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 98
    testRunner.And("the Advanced Authorization response should have the requirement \"AMOUNT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify that TerritoryFence fences can be parsed from Fences on a Conditional Geof" +
            "ence Policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Service Client Authorization Request: Get Device Response Policy - New Format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("device_testing")]
        public virtual void VerifyThatTerritoryFenceFencesCanBeParsedFromFencesOnAConditionalGeofencePolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that TerritoryFence fences can be parsed from Fences on a Conditional Geof" +
                    "ence Policy", null, ((string[])(null)));
#line 100
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line 101
    testRunner.Given("the Directory Service is set to any Conditional Geofence Policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "country",
                        "admin_area",
                        "postal_code",
                        "name"});
            table70.AddRow(new string[] {
                        "US",
                        "US-NV",
                        "89120",
                        "US-NV"});
#line 102
    testRunner.When("I add the following TerritoryFence items", ((string)(null)), table70, "When ");
#line 105
    testRunner.And("I set the Advanced Policy for the Current Directory Service to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
    testRunner.And("I make an Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
    testRunner.And("I deny the auth request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
    testRunner.And("I get the response for the Advanced Authorization request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
    testRunner.Then("the Advanced Authorization response should contain a TerritoryFence with a countr" +
                    "y of \"US\", a administrative area of \"US-NV\", a postal code of \"89120\", and a nam" +
                    "e of \"US-NV\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
    testRunner.And("the Advanced Authorization response should have the requirement \"COND_GEO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
