// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace iovation.LaunchKey.Sdk.Tests.Integration.Features.Policy
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SDKPolicyObjectCreationLimitationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "policy_construction.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SDK Policy Object Creation Limitations", "  I should be able to create Policy objects and they will behave appropriately", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SDK Policy Object Creation Limitations")))
            {
                global::iovation.LaunchKey.Sdk.Tests.Integration.Features.Policy.SDKPolicyObjectCreationLimitationsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SettingDeviceIntegrityChecksOnFactorsPolicyInsideNestedConditionsAreInvalid(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting device integrity checks on FactorsPolicy inside nested conditions are inv" +
                    "alid", null, exampleTags);
#line 5
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
    testRunner.When("I create a new Factors Policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
    testRunner.And("I set the factors to \"Knowledge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
    testRunner.And(string.Format("I set {0} on the Policy to {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
    testRunner.And("I attempt to create a new Conditional Geofence Policy with the inside policy set " +
                    "to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
    testRunner.Then("an InvalidPolicyAttributes error occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting device integrity checks on FactorsPolicy inside nested conditions are inv" +
            "alid: deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SDK Policy Object Creation Limitations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:field", "deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "True")]
        public virtual void SettingDeviceIntegrityChecksOnFactorsPolicyInsideNestedConditionsAreInvalid_Deny_Rooted_Jailbroken()
        {
#line 5
  this.SettingDeviceIntegrityChecksOnFactorsPolicyInsideNestedConditionsAreInvalid("deny_rooted_jailbroken", "True", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting device integrity checks on FactorsPolicy inside nested conditions are inv" +
            "alid: deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SDK Policy Object Creation Limitations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:field", "deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "True")]
        public virtual void SettingDeviceIntegrityChecksOnFactorsPolicyInsideNestedConditionsAreInvalid_Deny_Emulator_Simulator()
        {
#line 5
  this.SettingDeviceIntegrityChecksOnFactorsPolicyInsideNestedConditionsAreInvalid("deny_emulator_simulator", "True", ((string[])(null)));
#line hidden
        }
        
        public virtual void SettingDeviceIntegrityChecksOnFactorsPolicyOutsideNestedConditionsAreInvalid(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting device integrity checks on FactorsPolicy outside nested conditions are in" +
                    "valid", null, exampleTags);
#line 16
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 17
    testRunner.When("I create a new Factors Policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
    testRunner.And("I set the factors to \"Knowledge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
    testRunner.And(string.Format("I set {0} on the Policy to {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
    testRunner.And("I attempt to create a new Conditional Geofence Policy with the outside policy set" +
                    " to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
    testRunner.Then("an InvalidPolicyAttributes error occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting device integrity checks on FactorsPolicy outside nested conditions are in" +
            "valid: deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SDK Policy Object Creation Limitations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:field", "deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "True")]
        public virtual void SettingDeviceIntegrityChecksOnFactorsPolicyOutsideNestedConditionsAreInvalid_Deny_Rooted_Jailbroken()
        {
#line 16
  this.SettingDeviceIntegrityChecksOnFactorsPolicyOutsideNestedConditionsAreInvalid("deny_rooted_jailbroken", "True", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting device integrity checks on FactorsPolicy outside nested conditions are in" +
            "valid: deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SDK Policy Object Creation Limitations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:field", "deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "True")]
        public virtual void SettingDeviceIntegrityChecksOnFactorsPolicyOutsideNestedConditionsAreInvalid_Deny_Emulator_Simulator()
        {
#line 16
  this.SettingDeviceIntegrityChecksOnFactorsPolicyOutsideNestedConditionsAreInvalid("deny_emulator_simulator", "True", ((string[])(null)));
#line hidden
        }
        
        public virtual void SettingDeviceIntegrityChecksOnMethodAmountPolicyInsideNestedConditionsAreInvalid(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting device integrity checks on MethodAmountPolicy inside nested conditions ar" +
                    "e invalid", null, exampleTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 28
    testRunner.When("I create a new MethodAmountPolicy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
    testRunner.And("I set the amount to \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
    testRunner.And(string.Format("I set {0} on the Policy to {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
    testRunner.And("I attempt to create a new Conditional Geofence Policy with the inside policy set " +
                    "to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
    testRunner.Then("an InvalidPolicyAttributes error occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting device integrity checks on MethodAmountPolicy inside nested conditions ar" +
            "e invalid: deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SDK Policy Object Creation Limitations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:field", "deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "True")]
        public virtual void SettingDeviceIntegrityChecksOnMethodAmountPolicyInsideNestedConditionsAreInvalid_Deny_Rooted_Jailbroken()
        {
#line 27
  this.SettingDeviceIntegrityChecksOnMethodAmountPolicyInsideNestedConditionsAreInvalid("deny_rooted_jailbroken", "True", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting device integrity checks on MethodAmountPolicy inside nested conditions ar" +
            "e invalid: deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SDK Policy Object Creation Limitations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:field", "deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "True")]
        public virtual void SettingDeviceIntegrityChecksOnMethodAmountPolicyInsideNestedConditionsAreInvalid_Deny_Emulator_Simulator()
        {
#line 27
  this.SettingDeviceIntegrityChecksOnMethodAmountPolicyInsideNestedConditionsAreInvalid("deny_emulator_simulator", "True", ((string[])(null)));
#line hidden
        }
        
        public virtual void SettingDeviceIntegrityChecksOnMethodAmountPolicyOutsideNestedConditionsAreInvalid(string field, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting device integrity checks on MethodAmountPolicy outside nested conditions a" +
                    "re invalid", null, exampleTags);
#line 38
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 39
    testRunner.When("I create a new MethodAmountPolicy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
    testRunner.And("I set the amount to \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
    testRunner.And(string.Format("I set {0} on the Policy to {1}", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
    testRunner.And("I attempt to create a new Conditional Geofence Policy with the outside policy set" +
                    " to the new policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
    testRunner.Then("an InvalidPolicyAttributes error occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting device integrity checks on MethodAmountPolicy outside nested conditions a" +
            "re invalid: deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SDK Policy Object Creation Limitations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:field", "deny_rooted_jailbroken")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "True")]
        public virtual void SettingDeviceIntegrityChecksOnMethodAmountPolicyOutsideNestedConditionsAreInvalid_Deny_Rooted_Jailbroken()
        {
#line 38
  this.SettingDeviceIntegrityChecksOnMethodAmountPolicyOutsideNestedConditionsAreInvalid("deny_rooted_jailbroken", "True", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting device integrity checks on MethodAmountPolicy outside nested conditions a" +
            "re invalid: deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SDK Policy Object Creation Limitations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:field", "deny_emulator_simulator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "True")]
        public virtual void SettingDeviceIntegrityChecksOnMethodAmountPolicyOutsideNestedConditionsAreInvalid_Deny_Emulator_Simulator()
        {
#line 38
  this.SettingDeviceIntegrityChecksOnMethodAmountPolicyOutsideNestedConditionsAreInvalid("deny_emulator_simulator", "True", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Stacked Conditional Geofences are not allowed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SDK Policy Object Creation Limitations")]
        public virtual void StackedConditionalGeofencesAreNotAllowed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Stacked Conditional Geofences are not allowed", null, ((string[])(null)));
#line 49
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 50
    testRunner.Given("I have any Conditional Geofence Policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
    testRunner.When("I attempt to set the inside policy to any Conditional Geofence Policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
    testRunner.Then("an InvalidPolicyAttributes error occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
